package devices::variator_blctlv12
public

with types;
with buses;
with Electricity_Properties;
with Buses::I2C;  

-----------------
--   DEVICE   --
-----------------
device VARIATOR  
features
   Serial_Wire :    requires bus access Buses::I2C::I2C.impl;
   three_phases_Wire :    requires bus access buses::three_phases_bus.impl;
end  VARIATOR;

device implementation VARIATOR.impl
properties
  Initialize_Entrypoint => classifier (devices::variator_blctlv12::Initialize);
  Electricity_Properties::Idle_Current => 3.0 mA; -- no data
  Electricity_Properties::Run_Current => 50.0 mA;  -- no data
  Electricity_Properties::VIH_min => 2.0 V; 
  Electricity_Properties::VIL_max => 1.0 V; 
  Electricity_Properties::VOH_min => 3.2 V; 
  Electricity_Properties::VOL_max => 0.4 V;  
  Electricity_Properties::Device_Type => Slave;  
  Electricity_Properties::Core_Voltage => 12.0 V;
  Electricity_Properties::Peak_current => 0.0 mA;
  Electricity_Properties::Acquisition_Time => 0 ms;
  Electricity_Properties::Peak_Time => 0 ms;  
end VARIATOR.impl;
  
-----------------------------------
--  VARIATOR DRIVER FOR I2C INTERFACE --
-----------------------------------
abstract VARIATOR_Driver
end VARIATOR_Driver;
abstract implementation VARIATOR_Driver.impl
end VARIATOR_Driver.impl;


-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.

subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("variator_blctlv12.c");
  Source_Language => (C);
end Initialize;

subprogram Apply_speed
features
  device_address  : in parameter types::I2C_address; 
  ACTUATORS_cmd   : in parameter types::ACTUATORS_cmd_dat;  
properties
  Source_Name => "apply_speed";
  Source_Text => ("variator_blctlv12.c");
  Source_Language => (C);
end Apply_speed;
  
end devices::variator_blctlv12;
 
