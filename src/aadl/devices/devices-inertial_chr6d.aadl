package devices::inertial_chr6d
public

  with types;
  with Buses::UART;
  with Electricity_Properties;

-----------------
--   DEVICE   --
-----------------
device INERTIAL  
features
   Serial_Wire :    requires bus access  buses::UART::UART.impl;     
   proc_evt : out event port;
end  INERTIAL;
device implementation INERTIAL.impl
properties
  Initialize_Entrypoint => classifier (devices::inertial_chr6d::Initialize);
  Electricity_Properties::Idle_Current => 1.0 mA;  -- no data  
  Electricity_Properties::Run_Current =>  50.0 mA;  
  Electricity_Properties::Peak_Current => 100.0 mA; -- to measure
  Electricity_Properties::Core_Voltage => 3.3 V; -- typical voltage (voltage range 2.6 V - 3.6 V)
  Electricity_Properties::Acquisition_Time => 6 ms; -- no data but transsmit frequency is 280 Hz
  Electricity_Properties::Peak_Time => 1 ms;
  Electricity_Properties::VIH_min => 2.0 V; 
  Electricity_Properties::VIL_max => 1.0 V; 
  Electricity_Properties::VOH_min => 3.2 V; 
  Electricity_Properties::VOL_max => 0.4 V;  
  Electricity_Properties::Device_Type => Slave;  
end INERTIAL.impl;
  
-----------------------------------
--  INERTIAL DRIVER FOR UART INTERFACE --
-----------------------------------

abstract INERTIAL_Driver
end INERTIAL_Driver;
abstract implementation INERTIAL_Driver.impl
end INERTIAL_Driver.impl;


-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.
subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("inertial_chr6d.c");
  Source_Language => (C);
end Initialize;

subprogram Read_Acquisition
features
 INERTIAL_meas        : out parameter types::INERTIAL_meas_dat;
properties
  Source_Name => "read_acquisition";
  Source_Text => ("inertial_chr6d.c");
  Source_Language => (C);
end Read_Acquisition;

subprogram Start_Acquisition
properties
  Source_Name => "start_acquisition";
  Source_Text => ("inertial_chr6d.c");
  Source_Language => (C);
end Start_Acquisition;
  
end devices::inertial_chr6d;
 
