package devices::motor_tm550
public

with types;
with buses;
with Buses::I2C;
with Electricity_Properties;

-----------------
--   DEVICE   --
-----------------
device MOTOR_TM550  
features
   Serial_Wire :    requires bus access Buses::I2C::I2C.impl;
   Supply :         requires bus access buses::VBat_bus.impl;         
end  MOTOR_TM550;

device implementation MOTOR_TM550.impl
properties
  Initialize_Entrypoint => classifier (devices::motor_tm550::Initialize);
  Electricity_Properties::Idle_Current => 5000.0 mA; -- Run current
  Electricity_Properties::Run_Current => 13000.0 mA; -- Peak current
  Electricity_Properties::Acquisition_Time => 1 ms;
  Electricity_Properties::Core_Voltage => 14.4 V; 
end MOTOR_TM550.impl;
  
-----------------------------------
--  MOTOR_TM550 DRIVER FOR I2C INTERFACE --
-----------------------------------

abstract MOTOR_TM550_Driver
--properties
	-- device_address => "0xE0";
end MOTOR_TM550_Driver;

---------------------------------------------------------
-- /!\ The threads implementing the driver functions
-- should respect this naming convention :
-- (Driver_Name)_Thread_(Function_name)
---------------------------------------------------------
abstract implementation MOTOR_TM550_Driver.impl
end MOTOR_TM550_Driver.impl;



-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.

subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("motor_tm550.c");
  Source_Language => (C);
end Initialize;

subprogram Apply_speed
features
  device_channel  : in parameter types::PWM_channel; 
  ACTUATORS_cmd   : in parameter types::ACTUATORS_cmd_dat;  
properties
  Source_Name => "apply_speed";
  Source_Text => ("motor_tm550.c");
  Source_Language => (C);
end Apply_speed;
  
  
end devices::motor_tm550;
 
