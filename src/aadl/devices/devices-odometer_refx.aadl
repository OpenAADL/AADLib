package devices::odometer_refx
public

with types;
with buses;
with Electricity_Properties;

-----------------
--   DEVICE   --
-----------------
device ODOMETER   
 features
   Serial_Wire :    requires bus access buses::TIMER_bus.impl; 
   Supply :         requires bus access buses::V5_Bus.impl;       
   proc_evt : in event port;    
end  ODOMETER;

device implementation ODOMETER.impl
properties
  Initialize_Entrypoint => classifier (devices::odometer_refx::Initialize);
  Electricity_Properties::Idle_Current => 0.0 mA; -- N/A
  Electricity_Properties::Run_Current =>  0.1 mA; -- no data estimated value
  Electricity_Properties::Peak_Current => 100.0 mA; -- to measure
  Electricity_Properties::Core_Voltage => 3.3 V;
  Electricity_Properties::Acquisition_Time => 2 ms;
  Electricity_Properties::Peak_Time => 1 ms;
  Electricity_Properties::VIH_min => 3.1 V; 
  Electricity_Properties::VIL_max => 1.5 V; 
  Electricity_Properties::VOH_min => 4.7 V; 
  Electricity_Properties::VOL_max => 0.4 V;  
  -- level shifter added to connect to PWM interface
  Electricity_Properties::Level_Shifter_VIH_min => 2.0 V ;  
  Electricity_Properties::Level_Shifter_VIL_max => 1.0 V;  
  Electricity_Properties::Level_Shifter_VOH_min => 3.2 V;  
  Electricity_Properties::Level_Shifter_VOL_max => 0.4 V ;  
  Electricity_Properties::Device_Type => Slave;    
end ODOMETER.impl;
  
-----------------------------------
--  ODOMETER DRIVER FOR Timer INTERFACE --
-----------------------------------

abstract ODOMETER_Driver
end ODOMETER_Driver;
abstract implementation ODOMETER_Driver.impl
end ODOMETER_Driver.impl;



-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.

subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("odometer_refx.c");
  Source_Language => (C);
end Initialize;
subprogram Receive
end Receive;

subprogram Read_Acquisition
features
  device_channel       : in parameter types::TIMER_channel; -- device address type
  ODOMETER_meas        : out parameter types::ODOMETER_meas_dat;
properties
  Source_Name => "read_acquisition";
  Source_Text => ("odometer_refx.c");
  Source_Language => (C);
end Read_Acquisition;

subprogram Start_Acquisition
features
  device_channel       : in parameter types::TIMER_channel; -- device address type
properties
  Source_Name => "start_acquisition";
  Source_Text => ("odometer_refx.c");
  Source_Language => (C);
end Start_Acquisition;

   
end devices::odometer_refx;
 
