package devices::inertial_gps_ig500n
public

with types;
with buses;
with Electricity_Properties;
with Buses::UART;

-----------------
--   DEVICE   --
-----------------
-- GPS aided Orientation Sensor
device INERTIAL_GPS   
features
   Serial_Wire :    requires bus access  buses::UART::UART.impl;
   Supply :         requires bus access buses::V5_Bus.impl;        
   proc_evt : out event port;      
end  INERTIAL_GPS;
device implementation INERTIAL_GPS.impl
properties
  Initialize_Entrypoint => classifier (devices::inertial_gps_ig500n::Initialize);
  Electricity_Properties::Idle_Current => 1.0 mA;  -- no data  
  Electricity_Properties::Run_Current =>  110.0 mA; --  no data but power consumption 550 mW at 5V
  Electricity_Properties::Peak_Current => 100.0 mA; -- to measure
  Electricity_Properties::Core_Voltage => 5.0 V; -- optimal consumption but range is 3.3 - 30 V
  Electricity_Properties::Acquisition_Time => 3500 ms; -- worst case is GPS aquisition time which is < 3.5 s / 34 s Hot start / Cold start
  Electricity_Properties::Peak_Time => 1 ms;
  Electricity_Properties::VIH_min => 1.2 V;  
  Electricity_Properties::VIL_max => 0.5 V;  
  Electricity_Properties::VOH_min => 1.7 V;  
  Electricity_Properties::VOL_max => 0.1 V; 
  --Electricity_Properties::VIH_min => 2.0 V;  
  --Electricity_Properties::VIL_max => 1.0 V;  
  --Electricity_Properties::VOH_min => 3.2 V;  
  --Electricity_Properties::VOL_max => 0.4 V; 
  -- level shifter added to conenct to ARM9
  --Electricity_Properties::Level_Shifter_VIH_min => 1.2 V;  
  --Electricity_Properties::Level_Shifter_VIL_max => 0.5 V;  
  --Electricity_Properties::Level_Shifter_VOH_min => 1.7 V;  
  --Electricity_Properties::Level_Shifter_VOL_max => 0.1 V;  
  Electricity_Properties::Device_Type => Slave;  
end INERTIAL_GPS.impl;
  
abstract INERTIAL_GPS_Driver
end INERTIAL_GPS_Driver;
abstract implementation INERTIAL_GPS_Driver.impl
end INERTIAL_GPS_Driver.impl;


-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.
subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("inertial_gps_ig500n.c");
  Source_Language => (C);
end Initialize;

subprogram Read_Acquisition
features
 INERTIAL_GPS_meas        : out parameter types::INERTIAL_GPS_meas_dat;
properties
  Source_Name => "read_acquisition";
  Source_Text => ("inertial_gps_ig500n.c");
  Source_Language => (C);
end Read_Acquisition;

subprogram Start_Acquisition
properties
  Source_Name => "start_acquisition";
  Source_Text => ("inertial_gps_ig500n.c");
  Source_Language => (C);
end Start_Acquisition;
  
end devices::inertial_gps_ig500n;
 
