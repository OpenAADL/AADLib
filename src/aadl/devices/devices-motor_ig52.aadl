package devices::motor_ig52
public

with types;
with buses::I2C;
with Electricity_Properties;

-----------------
--   DEVICE   --
-----------------
device MOTOR_IG52  
features
   Serial_Wire :    requires bus access Buses::I2C::I2C.impl;
end  MOTOR_IG52;

device implementation MOTOR_IG52.impl
properties
  Initialize_Entrypoint => classifier (devices::motor_ig52::Initialize);
  Electricity_Properties::Idle_Current => 3.0 mA; -- no data
  Electricity_Properties::Run_Current => 15.0 mA;  -- no data
  --Electricity_Properties::IO_Voltage_Range => 0.0 V .. 5.0 V; -- no data
  Electricity_Properties::VIH_min => 0.0 V;
  Electricity_Properties::VOH_min => 0.0 V;
  Electricity_Properties::VIL_max => 5.0 V;
  Electricity_Properties::VOL_max => 5.0 V;  
  
  Electricity_Properties::Core_Voltage => 12.0 V; 
  Electricity_Properties::Acquisition_Time => 65 ms; -- no data
end MOTOR_IG52.impl;
  
-----------------------------------
--  MOTOR_IG52 DRIVER FOR I2C INTERFACE --
-----------------------------------

abstract MOTOR_IG52_Driver
--properties
	-- device_address => "0xE0";
end MOTOR_IG52_Driver;

---------------------------------------------------------
-- /!\ The threads implementing the driver functions
-- should respect this naming convention :
-- (Driver_Name)_Thread_(Function_name)
---------------------------------------------------------
abstract implementation MOTOR_IG52_Driver.impl
end MOTOR_IG52_Driver.impl;



-----------------
-- SUBPROGRAMS --
----------------- 
-- These subprograms model the high-level view of the serial line
-- protocol stack. They define an API used by the stack to send and
-- receive data, and perform node's initialisation.

subprogram Initialize
properties
  Source_Name => "initialize";
  Source_Text => ("motor_ig52.c");
  Source_Language => (C);
end Initialize;


subprogram Read_Acquisition
features
  device_address       : in parameter types::MOTOR_IG52_meas_dat; -- device address type
  MOTOR_IG52_meas         : out parameter types::MOTOR_IG52_meas_dat;
end Read_Acquisition;
subprogram implementation Read_Acquisition.impl
properties
  Source_Name => "read_acquisition";
  Source_Text => ("motor_ig52.c");
  Source_Language => (C);
end Read_Acquisition.impl;

subprogram Send
features
  device_address       : in parameter types::MOTOR_IG52_meas_dat; -- device address type
end Send;
subprogram implementation Send.impl
properties
  Source_Name => "start_acquisition";
  Source_Text => ("motor_ig52.c");
  Source_Language => (C);
end Send.impl;
  
  
end devices::motor_ig52;
 
