package Test::BA::Backend_BA_V2
public
  with Deployment;
  with Data_Model;
  with Buses::Ethernet;
  with Native_Sockets;
  with Using::Types::Defined::by::Base_Types;

  ----------
  -- Data --
  ----------

  data Alpha_Type
        properties
                Data_Model::Data_Representation => Integer;
  end Alpha_Type;

  data One_Dimension_Array
        properties
                Data_Model::Data_Representation => Array;
                Data_Model::Base_Type => (classifier (Using::Types::Defined::by::Base_Types::Integer));
                Data_Model::Dimension => (10);
  end One_Dimension_Array;

  data A_Struct
        properties
                Data_Model::Data_Representation => Struct;
  end A_Struct;

  data implementation A_Struct.impl
        subcomponents
                All_elems : data One_Dimension_Array;
                elem      : data Using::Types::Defined::by::Base_Types::Integer;
  end A_Struct.impl;

  data Nodes extends Using::Types::Defined::by::Base_Types::Integer
  properties
    Data_Model::Integer_Range => -1 .. 4;
  end Nodes;

  data MsgType
        properties
    Data_Model::Data_Representation => Enum;
    Data_Model::Enumerators => ("Empty", "VoteTimer", "AdjustTimer", "Sync",
    "Start", "Vote", "Adjust");
    Data_Model::Representation => ("1", "2", "3", "4", "5", "6", "7");
  end MsgType;

  data Msg
  properties
    Data_Model::Data_Representation => Struct;
  end Msg;

  data implementation Msg.impl
  subcomponents
    mtype : data MsgType;
    sid : data Nodes;
    nid : data Nodes;
  end Msg.impl;

  -----------------
  -- Subprograms --
  -----------------

  subprogram Produce_Spg
  features
    Data_Source : out parameter A_Struct.impl; --Using::Defined::Types::by::Base_Types::Integer; -- Alpha_Type;
  end Produce_Spg;

  subprogram implementation Produce_Spg.Impl
  annex behavior_specification {**
  variables
         tmp, tmp2, x, b      : Using::Types::Defined::by::Base_Types::Integer;
         V_Struct1, V_Struct2 : A_Struct.impl;
         V_Msg                : Msg.impl;
  states
     s : initial final state;
  transitions
     s -[ ]-> s {

                Data_Source.elem := 10;

            tmp := 5;
            tmp2 := 1;
            x := 1;

            -- Manipulation of non-simple data i.e. : array, struct, enum
            -- If, for, while, forall constructs

            V_Msg.mtype := msgtypemsgtype_empty;

            for (d : Using::Types::Defined::by::Base_Types::Integer in 1..10)
                {
                V_Struct1.elem := d - 1;
                Data_Source.elem := V_Struct1.elem;
                V_Struct1.All_elems [V_Struct1.elem] := V_Struct1.elem;
                Data_Source.All_elems [V_Struct1.All_elems [V_Struct1.elem]] :=
                         V_Struct1.elem + tmp * (10 - d) * (4 + 2) * 2 - V_Struct1.All_elems [V_Struct1.elem];
                if (d < tmp)
                        x := d + Data_Source.All_elems [d];
                                        forall (j : Using::Types::Defined::by::Base_Types::Integer in d .. tmp)
                                        {
                                                x := x + j;
                                                b := 0;
                                                while (b <= 2)
                                                {
                                                        x := tmp + j + d;
                                                        x := V_Struct1.elem + Data_Source.elem;
                                                        if (V_Struct1.All_elems [V_Struct1.elem] = 4)
                                                                x := 10;
                                                                tmp2 := tmp2 + 1;
                                                                tmp2 := tmp + tmp2 * (7 - 2) * (3 + 5) * 2
                                                        elsif (Data_Source.elem = b)
                                                                tmp2 := tmp + 3;
                                                tmp2 := tmp2 + 1;
                                                Print_Spg!(Data_Source)
                                                        elsif (b = 1)
                                                                tmp2 := tmp2 + tmp * (10 - 2) * (4 + 5) * 2
                                                        elsif (b = 2)
                                                                tmp2 := tmp + Data_Source.elem * 2;
                                                tmp2 := tmp + 3
                                                        else
                                                                tmp2 := Data_source.elem + tmp * 2;
                                                                Print_Spg!(V_Struct1)
                                                        end if;
                                                        x := x + tmp2;
                                                        b := b + 1
                                                }
                                };
                                x := x * 5 + tmp2
                        end if;
                                x := d + 3
            };

            -- Spg call
            Print_Spg!(Data_Source);

            V_Struct1.elem := V_Struct1.elem + 1;
            Print_Spg!(V_Struct1)
                        };
  **};
  end Produce_Spg.Impl;

  subprogram Print_Spg
  features
    A_Data_In  : in parameter A_Struct.impl;
  properties
    Source_Language => (C);
    Source_Name     => "print_spg";
    Source_Text     => ("producer_consumer.c");
  end Print_Spg;

  subprogram Consume_Spg
  features
    Data_Sink : in parameter A_Struct.impl;
  properties
    Source_Language => (C);
    Source_Name     => "consume_spg";
    Source_Text     => ("producer_consumer.c");
  end Consume_Spg;

  -------------
  -- Thread --
  -------------

  thread P
  features
    Data_Source : out event data port A_Struct.impl;
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 1 ms .. 10 ms;
    Priority => 1;
    Period => 500 ms;
  end P;

  thread implementation P.Impl
  calls
    Mycall : {
    P_Spg : subprogram Produce_Spg.Impl;
    };
  connections
    Z1:parameter P_Spg.Data_Source -> Data_Source;
  end P.Impl;

  thread Q
  features
    Data_Sink : in event data port A_Struct.impl;
  properties
    Dispatch_Protocol => Sporadic;
    Compute_Execution_Time => 1 ms .. 20 ms;
    Priority => 2;
    Period => 10 ms;
  end Q;

  thread implementation Q.Impl
  calls
    Mycall : {
    Q_Spg : subprogram Consume_Spg;
    };
  connections
    Z2:parameter Data_Sink -> Q_Spg.Data_Sink;
  end Q.Impl;

  ---------------
  -- Processor --
  ---------------

  processor the_processor
  properties
    Deployment::Execution_Platform => Native;
  end the_processor;

  ---------------
  -- Processes --
  ---------------

  process A
  features
    Alpha : out data port A_Struct.impl;
  end A;

  process implementation A.Impl
  subcomponents
    Producer  : thread P.Impl;
  connections
    Z3:port Producer.Data_Source -> Alpha;
  end A.Impl;

  process B
  features
    Beta  : in data port A_Struct.impl;
  end B;

  process implementation B.Impl
  subcomponents
    Consumer  : thread Q.Impl;
  connections
    Z4:port Beta -> Consumer.Data_Sink;
  end B.Impl;

  ------------
  -- System --
  ------------

  system PC_Simple
  end PC_Simple;

  system implementation PC_Simple.Native
  subcomponents
    pr_A : process A.Impl;
    pr_B : process B.Impl {Deployment::port_number => 4002;};
    Device_A : device Native_Sockets::Native_Sockets.pohi_c
    {Source_Text => ("devicesconf.c");};
    Device_B : device Native_Sockets::Native_Sockets.pohi_c
    {Source_Text => ("devicesconf.c");};

    CPU_A   : processor the_processor;
    CPU_B   : processor the_processor;
    the_bus : bus Buses::Ethernet::Ethernet.impl;
  connections
    Z1: bus access the_bus -> Device_A.Eth;
    Z2: bus access the_bus -> Device_B.Eth;
    Z6: port pr_A.Alpha -> pr_B.Beta;
  properties
    Actual_Processor_Binding => (reference (CPU_A)) applies to pr_A;
    Actual_Processor_Binding => (reference (CPU_B)) applies to pr_B;

    Actual_Connection_Binding => (reference (the_bus)) applies to Z6;
    actual_processor_binding => (reference (CPU_A)) applies to Device_A;
    actual_processor_binding => (reference (CPU_B)) applies to Device_B;

 annex real_specification {**
   theorem flow_latency
      foreach s in system_set do
         requires (Latency);
         check (1=1);
    end flow_latency;
  **};
  end PC_Simple.Native;

end Test::BA::Backend_BA_V2;
