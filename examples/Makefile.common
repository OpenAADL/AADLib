OCARINA = ocarina
OCARINA_FLAGS = -aadlv2 -y -disable-annexes=emv2 -I$(top_srcdir)/src/property_set \
	      -I$(top_srcdir)/src/aadl -I$(srcdir) $(AADL_LIB)

check-local: $(AVAILABLE_TARGETS)
EXTRA_DIST= $(AADL_SOURCES) $(OTHER_FILES)

EXAMPLE_DIR = ${shell basename '$(abs_srcdir)'}
SAMPLE_DIR = ${shell $(CYGPATH_U) '$(OCARINA_PREFIX)/examples/ocarina/$(EXAMPLE_DIR)'}

install-data-local:
	$(INSTALL) -d $(DESTDIR)$(SAMPLE_DIR)
	for file in $(EXTRA_DIST); do \
	 $(INSTALL_DATA) $$file $(DESTDIR)$(SAMPLE_DIR) || exit 1; \
	done

help:
	@echo "Available targets: " $(AVAILABLE_TARGETS)

parse-aadl:
	$(OCARINA) $(OCARINA_FLAGS) $(AADL_SOURCES)

instantiate:
	$(OCARINA) $(OCARINA_FLAGS) -i -r $(AADL_ROOT) $(AADL_SOURCES)

instantiate-aadl:
	$(OCARINA) $(OCARINA_FLAGS) -i -r $(AADL_ROOT) $(AADL_SOURCES)

aadl_xml:
	$(OCARINA) $(OCARINA_FLAGS) -g aadl_xml -r $(AADL_ROOT) \
		$(AADL_SOURCES)

alloy:
	$(OCARINA) $(OCARINA_FLAGS) -g alloy -o alloy -r $(AADL_ROOT) \
		$(AADL_SOURCES)
	cp -r `ocarina-config --runtime=alloy` .
	mv con_model.als alloy

c:
	$(OCARINA) $(OCARINA_FLAGS) -g polyorb_hi_c -r $(AADL_ROOT) \
		$(AADL_SOURCES)

build_c: c
	-$(OCARINA) -b $(OCARINA_FLAGS) -g polyorb_hi_c -r $(AADL_ROOT) \
		$(AADL_SOURCES)

ada:
	$(OCARINA) $(OCARINA_FLAGS) -g polyorb_hi_ada -r $(AADL_ROOT) \
		$(AADL_SOURCES)

build_ada: ada
	-$(OCARINA) -b $(OCARINA_FLAGS) -g polyorb_hi_ada -r $(AADL_ROOT) \
		$(AADL_SOURCES)

arinc653_conf:
	$(OCARINA) -b $(OCARINA_FLAGS) -g arinc653_conf -r $(AADL_ROOT) \
		$(AADL_SOURCES)

cheddar:
	$(OCARINA) $(OCARINA_FLAGS) -g cheddar -r $(AADL_ROOT) \
		$(AADL_SOURCES)

run_cheddar:
	-cheddarkernel_d -file ./*_cheddar.xml -request st

mast:
	$(OCARINA) $(OCARINA_FLAGS) -g mast -r $(AADL_ROOT) \
		$(AADL_SOURCES)

run_mast:
	-mast_analysis holistic mast-model.txt

petri:
	$(OCARINA) $(OCARINA_FLAGS) -g petri_nets -r $(AADL_ROOT) \
		$(AADL_SOURCES)

lnt:
	$(OCARINA) $(OCARINA_FLAGS) -g lnt -r $(AADL_ROOT) \
		$(AADL_SOURCES)

deos_code:
	$(OCARINA) $(OCARINA_FLAGS) -g pok_c -k deos -r $(AADL_ROOT) \
		$(AADL_SOURCES)
deos_conf:
	$(OCARINA) $(OCARINA_FLAGS) -g deos_conf -r $(AADL_ROOT) \
		$(AADL_SOURCES)

vxworks653_code:
	$(OCARINA) $(OCARINA_FLAGS) -g pok_c -k vxworks653 -r $(AADL_ROOT) \
		$(AADL_SOURCES)

vxworks653_conf:
	$(OCARINA) $(OCARINA_FLAGS) -g vxworks653_conf -r $(AADL_ROOT) \
		$(AADL_SOURCES)

stats:
	$(OCARINA) $(OCARINA_FLAGS) -g stats -r $(AADL_ROOT) \
		$(AADL_SOURCES)

subprograms:
	$(OCARINA) $(OCARINA_FLAGS) -g subprograms -r $(AADL_ROOT) \
		$(AADL_SOURCES)

bound-t:
	$(OCARINA) $(OCARINA_FLAGS) -g boundt -r $(AADL_ROOT) \
		$(AADL_SOURCES)

spacestudio:
	$(OCARINA) $(OCARINA_FLAGS) -g spacestudio -r $(AADL_ROOT) \
		$(AADL_SOURCES)

real:
	$(OCARINA) $(OCARINA_FLAGS) -g real_theorem \
                -real_continue_eval \
	        -real_lib $(top_srcdir)/src/real/aadl_theorems.real \
		-real_lib $(top_srcdir)/src/real/arinc653_theorems.real \
		-real_lib $(top_srcdir)/src/real/bare_board_theorems.real \
		-real_lib $(top_srcdir)/src/real/data_model_theorems.real \
		-real_lib $(top_srcdir)/src/real/edf_theorems.real \
		-real_lib $(top_srcdir)/src/real/ravenscar_theorems.real \
		-real_lib $(top_srcdir)/src/real/rma_theorems.real \
		-real_lib $(top_srcdir)/src/real/scheduling.real \
		-real_lib $(top_srcdir)/src/real/worst_case_rt.real \
		-r $(AADL_ROOT) \
		$(AADL_SOURCES)

#		-real_lib $(top_srcdir)/src/real/uxv_lib.real

#		-real_lib $(top_srcdir)/src/real/memory_theorems.real
#		-real_lib $(top_srcdir)/src/real/flow_latency.real
#		-real_lib $(top_srcdir)/src/real/electricity.real
#		-real_lib $(top_srcdir)/src/real/consumption.real

clean-local:
	-rm -rf *~ *aadl_xml.xml *_cheddar.xml mast-model.txt $(CLEANFILES) \
	    mast_parser.lis cheddar_bug.xml model.nd model.cami fta instances imv \
	    *.aaxl2 output.als scenario.tpo con_model.als assertions.txt *.lnt *.svl alloy generated-code
	if test ! "$(CLEANDIRS)" = "";  then \
	   rm -rf $(CLEANDIRS); \
	fi
