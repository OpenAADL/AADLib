package Producer::Consumer_BA
public
  with Deployment;
  with Base_Types;
  with Buses::Ethernet;
  with Native_Sockets;

  ----------
  -- Data --
  ----------

  data Alpha_Type extends Base_Types::Integer
  end Alpha_Type;

  -----------------
  -- Subprograms --
  -----------------

  subprogram Produce_Spg
  features
    Data_Source : out parameter Alpha_Type;
  end Produce_Spg;

  subprogram implementation Produce_Spg.Impl
  annex behavior_specification {**
  states
     s : initial final state;
  transitions
     s -[ ]-> s { Data_Source := 1;
                  Print_Spg!(Data_Source) };
  **};
  end Produce_Spg.Impl;

  subprogram Print_Spg
  features
    A_Data_In  : in parameter Alpha_Type;
  properties
    Source_Language => (C);
    Source_Name     => "print_spg";
    Source_Text     => ("producer_consumer.c");
  end Print_Spg;

  subprogram Consume_Spg
  features
    Data_Sink : in parameter Alpha_Type;
  properties
    Source_Language => (C);
    Source_Name     => "consume_spg";
    Source_Text     => ("producer_consumer.c");
  end Consume_Spg;

  -------------
  -- Threads --
  -------------

  thread P
  features
    Data_Source : out event data port Alpha_Type;
    --  XXX Data seems corrupted if Data_Source is an out data port
  properties
    Dispatch_Protocol => Periodic;
    Compute_Execution_Time => 1 ms .. 10 ms;
    Priority => 1;
    Period => 500 ms;
  end P;

  thread implementation P.Impl
  calls
    Mycall : {
    P_Spg : subprogram Produce_Spg.Impl;
    };
  connections
    Z1:parameter P_Spg.Data_Source -> Data_Source;
  end P.Impl;

  thread Q
  features
    Data_Sink : in event data port Alpha_Type;
  properties
    Dispatch_Protocol => Sporadic;
    Compute_Execution_Time => 1 ms .. 20 ms;
    Priority => 2;
    Period => 10 ms;
  end Q;

  thread implementation Q.Impl
  calls
    Mycall : {
    Q_Spg : subprogram Consume_Spg;
    };
  connections
    Z2:parameter Data_Sink -> Q_Spg.Data_Sink;
  end Q.Impl;

  ---------------
  -- Processor --
  ---------------

  processor the_processor
  properties
    Deployment::Execution_Platform => Native;
  end the_processor;

  ---------------
  -- Processes --
  ---------------

  process A
  features
    Alpha : out data port Alpha_Type;
  end A;

  process implementation A.Impl
  subcomponents
    Producer        : thread P.Impl;
  connections
    Z3:port Producer.Data_Source -> Alpha;
  end A.Impl;

  process B
  features
    Beta  : in data port Alpha_Type;
  end B;

  process implementation B.Impl
  subcomponents
    Consumer        : thread Q.Impl;
  connections
    Z4:port Beta -> Consumer.Data_Sink;
  end B.Impl;

  ------------
  -- System --
  ------------

  system PC_Simple
  end PC_Simple;

  system implementation PC_Simple.Native
  subcomponents
    pr_A : process A.Impl;
    pr_B : process B.Impl {Deployment::port_number => 4002;};
    Device_A : device Native_Sockets::Native_Sockets.pohi_c
    {Source_Text => ("devicesconf.c");};
    Device_B : device Native_Sockets::Native_Sockets.pohi_c
    {Source_Text => ("devicesconf.c");};

    CPU_A   : processor the_processor;
    CPU_B   : processor the_processor;
    the_bus : bus Buses::Ethernet::Ethernet.impl;
  connections
    Z1: bus access the_bus -> Device_A.Eth;
    Z2: bus access the_bus -> Device_B.Eth;

--    Z5:bus access the_bus -> CPU.ETH;
    Z6:port pr_A.Alpha -> pr_B.Beta;
  properties
    Actual_Processor_Binding => (reference (CPU_A)) applies to pr_A;
    Actual_Processor_Binding => (reference (CPU_B)) applies to pr_B;

    Actual_Connection_Binding => (reference (the_bus)) applies to Z6;
    actual_processor_binding => (reference (CPU_A)) applies to Device_A;
    actual_processor_binding => (reference (CPU_B)) applies to Device_B;

 annex real_specification {**
   theorem flow_latency
      foreach s in system_set do
         requires (Latency);
         check (1=1);
    end flow_latency;
  **};
  end PC_Simple.Native;

end Producer::Consumer_BA;
