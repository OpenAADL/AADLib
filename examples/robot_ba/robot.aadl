package Robot
public
  with Deployment;
  with Data_Model;

  ----------
  -- Data --
  ----------

  data Alpha_Type
  properties
    Data_Model::Data_Representation => integer;
  end Alpha_Type;

  -------------------
  --  Subprograms  --
  -------------------

  subprogram collecte_donnee
  features
    d_source : out parameter Alpha_Type;
  end collecte_donnee;

  subprogram traite
  features
    d_info  : in parameter Alpha_Type;
    d_ordre : out parameter Alpha_Type;
  end traite;

  subprogram action
  features
    d_action : in parameter Alpha_Type;
  end action;

  ---------------
  --  Threads  --
  ---------------

  --  interfaces

  thread capteur
  features
    evenement    : out event data port Alpha_Type;
  end capteur;

  thread controle
  features
    info_capteur : in event data port Alpha_Type;
    comm_servo   : out event data port Alpha_Type;
  end controle;

  thread servomoteur
  features
    ordre        : in event data port Alpha_Type;
  end servomoteur;

  --  implementations

  thread implementation capteur.i
  calls C: {
    D_Spg : subprogram collecte_donnee;
    };
  connections
    conn1: parameter D_Spg.d_source -> evenement;
  properties
    Dispatch_Protocol => Periodic;
    Period            => 110 ms;
    Compute_Execution_Time => 0 ms .. 1 ms;

  annex Behavior_specification {**
    states
      s0 : initial complete final state;
    transitions
      s0 -[on dispatch]-> s0 {
        computation(1ms);
        evenement := true};
      s0 -[on dispatch]-> s0 {
        computation(1ms);
        evenement := false};
  **};
  end capteur.i;

  thread implementation controle.i
  calls C: {
    T_Spg : subprogram traite;
    };
  connections
    conn1: parameter info_capteur  -> T_Spg.d_info;
    conn2: parameter T_Spg.d_ordre -> comm_servo;
  properties
    Dispatch_Protocol => Periodic;
    Period            => 110 ms;
    Compute_Execution_Time => 0 ms .. 1 ms;
  annex Behavior_specification {**
    states
        s_inline : initial complete final state;
        s1, s2 : state;
        s_outline : complete state;

    transitions
        s_inline -[on dispatch]-> s1;
        s1 -[info_capteur ]-> s_inline;
        s1 -[not info_capteur ]-> s_outline {
          comm_servo := false}; -- order for servomotor to turn off


        s_outline -[on dispatch]-> s2;
        s2 -[not info_capteur]-> s_outline;
        s2 -[info_capteur ]-> s_inline {
          comm_servo := true};-- order for servomotor to turn on
  **};
  end controle.i;

  thread implementation servomoteur.i
  calls main : {
    A_Spg : subprogram action;
    };
  connections
    conn1: parameter ordre -> A_Spg.d_action;
  properties
    Dispatch_Protocol => Sporadic;
    Period    => 10 ms;
    Compute_Execution_Time => 0 ms .. 1 ms;
  end servomoteur.i;

  -----------------
  --  Processes  --
  -----------------

  --  interfaces

  process p_capteur
  features
    evenement           : out event data port Alpha_Type;
  end p_capteur;

  process p_controle
  features
    info_capteur_droit  : in event data port Alpha_Type;
    comm_servo_droit    : out event data port Alpha_Type;

    info_capteur_gauche : in event data port Alpha_Type;
    comm_servo_gauche   : out event data port Alpha_Type;
  end p_controle;

  process p_servomoteur
  features
    ordre               : in event data port Alpha_Type;
  end p_servomoteur;

  --  implementations

  process implementation p_capteur.i
  subcomponents
    th_c : thread capteur.i;
  connections
    conn1: port th_c.evenement            -> evenement;
  end p_capteur.i;

  process implementation p_controle.i
  subcomponents
    th_ctrl_droit  : thread controle.i;
    th_ctrl_gauche : thread controle.i;
  connections
    conn1: port info_capteur_droit        -> th_ctrl_droit.info_capteur;
    conn2: port th_ctrl_droit.comm_servo  -> comm_servo_droit;
    conn3: port info_capteur_gauche       -> th_ctrl_gauche.info_capteur;
    conn4: port th_ctrl_gauche.comm_servo -> comm_servo_gauche;
  end p_controle.i;

  process implementation p_servomoteur.i
  subcomponents
    th_servomoteur : thread servomoteur.i;
  connections
    conn1: port ordre -> th_servomoteur.ordre;
  end p_servomoteur.i;

  --------------
  --  System  --
  --------------

  processor the_processor
  end the_processor;

  --  interface

  system robot
  end robot;

  --  implementation

  system implementation robot.i
  subcomponents
    proc_capteur_droit      : process p_capteur.i;
    proc_capteur_gauche     : process p_capteur.i;

    proc_controle           : process p_controle.i;

    proc_servomoteur_droit  : process p_servomoteur.i;
    proc_servomoteur_gauche : process p_servomoteur.i;

    CPU1                    : processor the_processor;
  connections
    conn1: port proc_capteur_droit.evenement    -> proc_controle.info_capteur_droit;
    conn2: port proc_capteur_gauche.evenement   -> proc_controle.info_capteur_gauche;

    conn3: port proc_controle.comm_servo_droit  -> proc_servomoteur_droit.ordre;
    conn4: port proc_controle.comm_servo_gauche -> proc_servomoteur_gauche.ordre;
  properties
    actual_processor_binding => (reference (CPU1)) applies to proc_capteur_droit;
    actual_processor_binding => (reference (CPU1)) applies to proc_capteur_gauche;

    actual_processor_binding => (reference (CPU1)) applies to proc_controle;

    actual_processor_binding => (reference (CPU1)) applies to proc_servomoteur_droit;
    actual_processor_binding => (reference (CPU1)) applies to proc_servomoteur_gauche;
  end robot.i;

end Robot;
